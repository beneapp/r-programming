install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
# or devtools::install_local('IRkernel-master.tar.gz')
IRkernel::installspec()  # to register the kernel in the current R installation
package_version(R.version)
IRkernel::installspec(name = 'ir35', displayname = 'R 3.5')
1+4
a<-5
a
ls()
rm(a)
getwd()
getwd
extractNoun('대한민국의 영토는 한반도와 그 부소도서로 한다')
install.packages('stringr')
libarary(stringr)
libarary(stringr)
library(stringr)
nouns <- extractNoun(txt)
# 패키지 설치
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
# 패키지 로드
library(KoNLP)
library(dplyr)
# 패키지 로드
library(KoNLP)
# 패키지 로드
library(KoNLP)
useNIADic()
# 패키지 로드
library(KoNLP)
# 패키지 설치
install.packages("rJava")
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
library(dplyr)
# 패키지 로드
library(KoNLP)
useNIADic()
useNIADic()
# 패키지 로드
library(KoNLP)
library(dplyr)
useNIADic()
install.packages('stringr')
install.packages("stringr")
library(stringr)
extractNoun('대한민국의 영토는 한반도와 그 부소도서로 한다')
nouns <- extractNoun(txt)
# 패키지 로드
library(KoNLP)
R.Version()
R.version
R.version.string
version
# 패키지 로드
library(KoNLP)
library(dplyr)
useNIADic()
install.packages("KoNLP")
useNIADic()
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
setdiff(dir(.libPaths()), .packages(all = TRUE))
useNIADic()
library(dplyr)
# 패키지 로드
library(KoNLP)
search()
install.packages("KoNLP")
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
# 패키지 로드
library(KoNLP)
# 패키지 로드
library(KoNLP)
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
library(dplyr)
useNIADic()
install.packages('stringr')
library(stringr)
install.packages("KoNLP")
# 패키지 로드
library(KoNLP)
library(dplyr)
useNIADic()
install.packages('stringr')
install.packages("stringr")
library(stringr)
library(stringr)
extractNoun('대한민국의 영토는 한반도와 그 부소도서로 한다')
library(dplyr)
extractNoun('대한민국의 영토는 한반도와 그 부소도서로 한다')
useNIADic()
# 패키지 로드
library(KoNLP)
txt <- readLines('data/hiphop.txt')
txt <- readLines('/data/hiphop.txt')
txt <- readLines('./data/hiphop.txt')
txt <- readLines('data/hiphop.txt')
txt <- readLines('data\hiphop.txt')
txt <- readLines('data//hiphop.txt')
txt <- readLines('data/hiphop.txt')
# 데이터 불러오기
txt <- readLines('data/hiphop.txt')
head(txt)
# 데이터 불러오기
txt <- readLines('./data/hiphop.txt')
# 데이터 불러오기
txt <- readLines('../data/hiphop.txt')
# 데이터 불러오기
txt <- readLines('data/hiphop.txt')
# 데이터 불러오기
txt <- readLines('.data/hiphop.txt')
# 데이터 불러오기
setwd('C:\Users\Playdata\weekend_R\쉽게 배우는 R 데이터 분석')
# 데이터 불러오기
setwd('C:/Users/Playdata/weekend_R/쉽게 배우는 R 데이터 분석')
txt <- readLines('data/hiphop.txt')
txt <- readLines('./data/hiphop.txt')
head(txt)
txt <- str_replace_all(txt, '\\W', ' ')
extractNoun('대한민국의 영토는 한반도와 그 부소도서로 한다')
nouns <- extractNoun(txt)
head(txt)
# 가사에서 명사 추출
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringasFactors = F)
head(df_word)
# 변수명 수정
df_word <- rename(df_word, word = Var1, freq = Freq)
head(df_word)
head(df_word)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
head(df_word)
df_word
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
nchar
?nchar
# 변수명 수정
df_word <- rename(df_word, word = Var1, freq = Freq)
df_word
head(df_word)
?nchar
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
# 패키지 설치
install.packages('wordcloud')
# 패키지 로드
library(wordcloud)
library(RColorBrewer)
I
# Dark2 색상 목록에서 8개 색상 추출
pal <- brewer.pal(8, 'Dark2')
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal          )
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringasFactors = F)
head(df_word)
# 변수명 수정
df_word <- rename(df_word, word = Var1, freq = Freq)
head(df_word)
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
head(df_word)
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringasFactors = F)
head(df_word)
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
# 변수명 수정
df_word <- rename(df_word, word = Var1, freq = Freq)
# 두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
head(df_word)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal          )
#as.character(df$col1)
df_word <- filter(df_word, nchar(as.character(df_word$word)) >= 2)
head(df_word)
# Dark2 색상 목록에서 8개 색상 추출
pal <- brewer.pal(8, 'Dark2')
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal          )
pal <- brewer.pal(9, 'Blues')[5:9]
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal          )
pal <- brewer.pal(8, 'Blues')[5:9]
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal          )
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
pal <- brewer.pal(9, 'Blues')[5:9]
set.seed(1234)
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2 ,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
# 데이터 로드
twitter <- read.csv('./data/twitter.csv',
header = T,
stringsAsFactors = F,
fileEncoding = 'UTF-8')
head(twitter)
# 변수명 수정
twitter <- rename(twitter,
no = 번호,
id = 계정이름,
date = 작성일,
tw = 내용)
head(twitter)
# 특수문자 제거
twitter$tw <- str_replace_all(twitter$tw, '\\W', ' ')
head(twitter$tw)
# 단어 빈도표 만들기
# 트윗에서 명사추출
nouns <- extractNoun(twitter$tw)
# 추출한 명사 list를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
wordcount
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
df_word
view(df_word)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어만 추출
df_word <- filter(df_word, nchar(df_word$word) >= 2)
View(df_word)
# 두 글자 이상 단어만 추출
df_word <- filter(df_word, nchar(df_word$word) >= 2)
View(df_word)
a
a
# 특수문자 제거
twitter$tw <- str_replace_all(twitter$tw, '\\W', ' ')
head(twitter$tw)
# 단어 빈도표 만들기
# 트윗에서 명사추출
nouns <- extractNoun(twitter$tw)
# 추출한 명사 list를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어만 추출
df_word <- filter(df_word, nchar(df_word$word) >= 2)
View(df_word)
top20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top20
library(ggplot2)
# 빈도 순서 변수 생성
order <- arrange(top20, freq)$word
ggplot(data=top20, aes(x=word, y=freq)) +
ylim(0, 2500) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label=freq), hjust=-0.3)
ggplot(data=top20, aes(x=word, y=freq)) +
ylim(0, 2500) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +       # 빈도순 막대 정렬
geom_text(aes(label=freq), hjust=-0.3)  # 빈도 표
wordcloud(words = df_word$word,
freq=df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per =.1,
scale = c(6, 0.2),
colors = pal)
pal <- brewer.pal(8, 'Dark2')
set.seed(1234)
wordcloud(words = df_word$word,
freq=df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per =.1,
scale = c(6, 0.2),
colors = pal)
pal <- brewer.pal(9, 'Blues')[5:9]
set.seed(1234)
wordcloud(words = df_word$word,
freq=df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per =.1,
scale = c(6, 0.2),
colors = pal)
wordcloud(words = df_word$word,
freq=df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = 1,
scale = c(6, 0.2),
colors = pal)
wordcloud(words = df_word$word,
freq=df_word$freq,
min.freq = 10,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(6, 0.2),
colors = pal)
library(ggiraphExtra)
### 미국 주별 범죄 데이터 준비하기
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = 'state')
crime$state <- tolower(crime$state)
str(crime)
head(crime)
### 미국 주 지도 데이터 준비하기
library(ggplot2)
states_map <- map_data('state')
str(states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
install.packages('stringi')
install.packages("stringi")
kappa()
install.packages('stringi')
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
install.packages("devtools")
install.packages("devtools")
library(kormaps2014)
library(kormaps2014)
install.packages('stringi')
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
install.packages("devtools")
library(kormaps2014)
install.packages("devtools")
str(changeCode(korpop1))
str(changeCode(korpop1))
library(kormaps2014)
str(changeCode(korpop1))
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode(kormap1))
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
library(ggplot2)
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
?ggChoropleth
library(ggplot2)
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
library(dplyr)
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
library(ggplot2)
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
### 단계 구분도 만들기
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)      # 인터렉티브
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
### 미국 주 지도 데이터 준비하기
library(ggplot2)
states_map <- map_data('state')
str(states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T)
